{"version":3,"file":"ng-pluralize.js","sources":["../../src/app/vars/ng-pluralize-irregular-rules.var.ts","../../src/app/vars/ng-pluralize-pluralization-rules.var.ts","../../src/app/vars/ng-pluralize-singularization-rules.var.ts","../../src/app/vars/ng-pluralize-uncountable.var.ts","../../src/app/services/pluralize.service.ts","../../src/app/ng-pluralize.module.ts","../../src/ng-pluralize.ts"],"sourcesContent":["/**\n * Irregular rules.\n */\nexport var NgPluralizeIrregularRules = [\n  // Pronouns.\n  ['I', 'we'],\n  ['me', 'us'],\n  ['he', 'they'],\n  ['she', 'they'],\n  ['them', 'them'],\n  ['myself', 'ourselves'],\n  ['yourself', 'yourselves'],\n  ['itself', 'themselves'],\n  ['herself', 'themselves'],\n  ['himself', 'themselves'],\n  ['themself', 'themselves'],\n  ['is', 'are'],\n  ['was', 'were'],\n  ['has', 'have'],\n  ['this', 'these'],\n  ['that', 'those'],\n  // Words ending in with a consonant and `o`.\n  ['echo', 'echoes'],\n  ['dingo', 'dingoes'],\n  ['volcano', 'volcanoes'],\n  ['tornado', 'tornadoes'],\n  ['torpedo', 'torpedoes'],\n  // Ends with `us`.\n  ['genus', 'genera'],\n  ['viscus', 'viscera'],\n  // Ends with `ma`.\n  ['stigma', 'stigmata'],\n  ['stoma', 'stomata'],\n  ['dogma', 'dogmata'],\n  ['lemma', 'lemmata'],\n  ['schema', 'schemata'],\n  ['anathema', 'anathemata'],\n  // Other irregular rules.\n  ['ox', 'oxen'],\n  ['axe', 'axes'],\n  ['die', 'dice'],\n  ['yes', 'yeses'],\n  ['foot', 'feet'],\n  ['eave', 'eaves'],\n  ['goose', 'geese'],\n  ['tooth', 'teeth'],\n  ['quiz', 'quizzes'],\n  ['human', 'humans'],\n  ['proof', 'proofs'],\n  ['carve', 'carves'],\n  ['valve', 'valves'],\n  ['looey', 'looies'],\n  ['thief', 'thieves'],\n  ['groove', 'grooves'],\n  ['pickaxe', 'pickaxes'],\n  ['passerby', 'passersby'],\n  ['whiskey', 'whiskies']\n];\n","/**\n * Pluralization rules.\n */\nexport var NgPluralizePluralizationRules = [\n  [/s?$/i, 's'],\n  [/[^\\u0000-\\u007F]$/i, '$0'],\n  [/([^aeiou]ese)$/i, '$1'],\n  [/(ax|test)is$/i, '$1es'],\n  [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n  [/(e[mn]u)s?$/i, '$1s'],\n  [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n  [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n  [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n  [/(seraph|cherub)(?:im)?$/i, '$1im'],\n  [/(her|at|gr)o$/i, '$1oes'],\n  [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n  [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n  [/sis$/i, 'ses'],\n  [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n  [/([^aeiouy]|qu)y$/i, '$1ies'],\n  [/([^ch][ieo][ln])ey$/i, '$1ies'],\n  [/(x|ch|ss|sh|zz)$/i, '$1es'],\n  [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n  [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n  [/(pe)(?:rson|ople)$/i, '$1ople'],\n  [/(child)(?:ren)?$/i, '$1ren'],\n  [/eaux$/i, '$0'],\n  [/m[ae]n$/i, 'men'],\n  ['thou', 'you']\n]\n","/**\n * Singularization rules.\n */\nexport var NgPluralizeSingularizationRules = [\n  [/s$/i, ''],\n  [/(ss)$/i, '$1'],\n  [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n  [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n  [/ies$/i, 'y'],\n  [/(dg|ss|ois|lk|ok|wn|mb|th|ch|ec|oal|is|ck|ix|sser|ts|wb)ies$/i, '$1ie'],\n  [/\\b(l|(?:neck|cross|hog|aun)?t|coll|faer|food|gen|goon|group|hipp|junk|vegg|(?:pork)?p|charl|calor|cut)ies$/i, '$1ie'],\n  [/\\b(mon|smil)ies$/i, '$1ey'],\n  [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n  [/(seraph|cherub)im$/i, '$1'],\n  [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n  [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n  [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n  [/(test)(?:is|es)$/i, '$1is'],\n  [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n  [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n  [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n  [/(alumn|alg|vertebr)ae$/i, '$1a'],\n  [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n  [/(matr|append)ices$/i, '$1ix'],\n  [/(pe)(rson|ople)$/i, '$1rson'],\n  [/(child)ren$/i, '$1'],\n  [/(eau)x?$/i, '$1'],\n  [/men$/i, 'man']\n];\n","// Singular words with no plurals.\nexport var NgPluralizeUncountable =\n  [\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'software',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eÃ©]mon$/i,\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ];\n","import {Injectable} from '@angular/core';\n\nimport {NgPluralizeUncountable} from '../vars/ng-pluralize-uncountable.var';\nimport {NgPluralizeSingularizationRules} from '../vars/ng-pluralize-singularization-rules.var';\nimport {NgPluralizePluralizationRules} from '../vars/ng-pluralize-pluralization-rules.var';\nimport {NgPluralizeIrregularRules} from \"../vars/ng-pluralize-irregular-rules.var\";\n\n@Injectable()\nexport class PluralizeService {\n  private pluralRules = [];\n  private singularRules = [];\n  private uncountables = {};\n  private irregularPlurals = {};\n  private irregularSingles = {};\n  private restoreCaseExceptions = [];\n  \n  constructor() {\n    this._loadRules();\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  private _checkWord(replaceMap:any, keepMap:any, rules:any):Function {\n    return (word) => {\n      const token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) {\n        return true;\n      }\n\n      if (replaceMap.hasOwnProperty(token)) {\n        return false;\n      }\n\n      return this._sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  private _interpolate(str:string, args:any) {\n    return str.replace(\n      /\\$(\\d{1,2})/g,\n      (match, index) => {\n        return args[index] || '';\n      }\n    );\n  }\n\n  private _loadRules() {\n    NgPluralizeIrregularRules.forEach(\n      (rule) => {\n        return this.addIrregularRule(rule[0], rule[1]);\n      }\n    );\n\n    NgPluralizeSingularizationRules.forEach(\n      (rule) => {\n        return this.addSingularRule(rule[0], rule[1]);\n      }\n    );\n\n    NgPluralizePluralizationRules.forEach(\n      (rule) => {\n        return this.addPluralRule(rule[0], rule[1]);\n      }\n    );\n\n    /**\n     * Uncountable rules.\n     */\n    NgPluralizeUncountable.forEach(\n      (rule) => {\n        this.addUncountableRule(rule);\n      }\n    );\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  _replace(word:string, rule:any):string {\n    return word.replace(\n      rule[0],\n      function(match, index) {\n        var result = this._interpolate(rule[1], arguments);\n\n        if (match === '') {\n          return this._restoreCase(word[index - 1], result);\n        }\n\n        return this._restoreCase(match, result);\n      }.bind(this)\n    );\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  private _replaceWord(replaceMap:any, keepMap:any, rules:any) {\n    return (word) => {\n      // Get the correct token and case restoration functions.\n      const token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return this._restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return this._restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return this._sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  private _restoreCase(word:string, token:string):string {\n    // Do not restore the case of specified tokens\n    if (this.restoreCaseExceptions.indexOf(token) !== -1) {\n      return token;\n    }\n\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  private static _sanitizeRule(rule:string|RegExp):RegExp {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  private _sanitizeWord(token:string, word:string, rules:any):string {\n    // Empty string or doesn't need fixing.\n    if (!token.length || this.uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return this._replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  public addPluralRule(rule, replacement) {\n    this.pluralRules.push([PluralizeService._sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an exception to restoreCase.\n   *\n   * @param {string} exception\n   */\n\n  addRestoreCaseException(exception) {\n    this.restoreCaseExceptions.push(exception);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  addSingularRule(rule, replacement) {\n    this.singularRules.push([PluralizeService._sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  addUncountableRule(word) {\n    if (typeof word === 'string') {\n      this.uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singularize and pluralize references for the word.\n    this.addPluralRule(word, '$0');\n    this.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  addIrregularRule(single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    this.irregularSingles[single] = plural;\n    this.irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to fromCount\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  public fromCount(word:string, count:number, inclusive:boolean) {\n    var pluralized = count === 1\n      ? this.singularize(word) : this.pluralize(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  public pluralize = this._replaceWord(this.irregularSingles, this.irregularPlurals, this.pluralRules);\n\n  /**\n   * Check if a word is pluralize.\n   *\n   * @type {Function}\n   */\n  public isPlural = this._checkWord(this.irregularSingles, this.irregularPlurals, this.pluralRules);\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  public singularize = this._replaceWord(this.irregularPlurals, this.irregularSingles, this.singularRules);\n\n  /**\n   * Check if a word is singularize.\n   *\n   * @type {Function}\n   */\n  public isSingular = this._checkWord(this.irregularPlurals, this.irregularSingles, this.singularRules);\n}\n","import {NgModule} from '@angular/core';\n\nimport {PluralizeService} from './services/pluralize.service';\n\n@NgModule({\n  providers: [\n    PluralizeService\n  ]\n})\nexport class NgPluralizeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './main';\n"],"names":[],"mappings":"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"}