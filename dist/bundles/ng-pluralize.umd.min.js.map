{"version":3,"sources":["../../src/app/vars/ng-pluralize-irregular-rules.var.ts","../../src/app/vars/ng-pluralize-pluralization-rules.var.ts","../../src/app/vars/ng-pluralize-singularization-rules.var.ts","../../src/app/vars/ng-pluralize-uncountable.var.ts","../../src/app/services/pluralize.service.ts","../../src/app/ng-pluralize.module.ts"],"names":["NgPluralizeIrregularRules","NgPluralizePluralizationRules","NgPluralizeSingularizationRules","NgPluralizeUncountable","PluralizeService","this","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","restoreCaseExceptions","pluralize","_replaceWord","isPlural","_checkWord","singularize","isSingular","_loadRules","prototype","replaceMap","keepMap","rules","_this","word","token","toLowerCase","hasOwnProperty","_sanitizeWord","_interpolate","str","args","replace","match","index","forEach","rule","addIrregularRule","addSingularRule","addPluralRule","addUncountableRule","_replace","result","arguments","_restoreCase","bind","indexOf","toUpperCase","charAt","substr","_sanitizeRule","RegExp","length","len","test","replacement","push","addRestoreCaseException","exception","single","plural","fromCount","count","inclusive","Injectable","NgModule","providers"],"mappings":"+TAGWA,EAA4B,CAErC,CAAC,IAAK,MACN,CAAC,KAAM,MACP,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,OAAQ,QACT,CAAC,SAAU,aACX,CAAC,WAAY,cACb,CAAC,SAAU,cACX,CAAC,UAAW,cACZ,CAAC,UAAW,cACZ,CAAC,WAAY,cACb,CAAC,KAAM,OACP,CAAC,MAAO,QACR,CAAC,MAAO,QACR,CAAC,OAAQ,SACT,CAAC,OAAQ,SAET,CAAC,OAAQ,UACT,CAAC,QAAS,WACV,CAAC,UAAW,aACZ,CAAC,UAAW,aACZ,CAAC,UAAW,aAEZ,CAAC,QAAS,UACV,CAAC,SAAU,WAEX,CAAC,SAAU,YACX,CAAC,QAAS,WACV,CAAC,QAAS,WACV,CAAC,QAAS,WACV,CAAC,SAAU,YACX,CAAC,WAAY,cAEb,CAAC,KAAM,QACP,CAAC,MAAO,QACR,CAAC,MAAO,QACR,CAAC,MAAO,SACR,CAAC,OAAQ,QACT,CAAC,OAAQ,SACT,CAAC,QAAS,SACV,CAAC,QAAS,SACV,CAAC,OAAQ,WACT,CAAC,QAAS,UACV,CAAC,QAAS,UACV,CAAC,QAAS,UACV,CAAC,QAAS,UACV,CAAC,QAAS,UACV,CAAC,QAAS,WACV,CAAC,SAAU,WACX,CAAC,UAAW,YACZ,CAAC,WAAY,aACb,CAAC,UAAW,aCrDHC,EAAgC,CACzC,CAAC,OAAQ,KACT,CAAC,qBAAsB,MACvB,CAAC,kBAAmB,MACpB,CAAC,gBAAiB,QAClB,CAAC,qCAAsC,QACvC,CAAC,eAAgB,OACjB,CAAC,yCAA0C,MAC3C,CAAC,4FAA6F,OAC9F,CAAC,gCAAiC,QAClC,CAAC,2BAA4B,QAC7B,CAAC,iBAAkB,SACnB,CAAC,wHAAyH,OAC1H,CAAC,qGAAsG,OACvG,CAAC,QAAS,OACV,CAAC,2CAA4C,WAC7C,CAAC,oBAAqB,SACtB,CAAC,uBAAwB,SACzB,CAAC,oBAAqB,QACtB,CAAC,gDAAiD,UAClD,CAAC,gCAAiC,SAClC,CAAC,sBAAuB,UACxB,CAAC,oBAAqB,SACtB,CAAC,SAAU,MACX,CAAC,WAAY,OACb,CAAC,OAAQ,QCzBAC,EAAkC,CAC3C,CAAC,MAAO,IACR,CAAC,SAAU,MACX,CAAC,gEAAiE,QAClE,CAAC,kCAAmC,OACpC,CAAC,QAAS,KACV,CAAC,gEAAiE,QAClE,CAAC,8GAA+G,QAChH,CAAC,oBAAqB,QACtB,CAAC,uBAAwB,UACzB,CAAC,sBAAuB,MACxB,CAAC,2FAA4F,MAC7F,CAAC,qEAAsE,SACvE,CAAC,iCAAkC,MACnC,CAAC,oBAAqB,QACtB,CAAC,4FAA6F,QAC9F,CAAC,yGAA0G,QAC3G,CAAC,8FAA+F,QAChG,CAAC,0BAA2B,OAC5B,CAAC,+BAAgC,QACjC,CAAC,sBAAuB,QACxB,CAAC,oBAAqB,UACtB,CAAC,eAAgB,MACjB,CAAC,YAAa,MACd,CAAC,QAAS,QC1BDC,EACT,CACE,YACA,SACA,SACA,MACA,WACA,UACA,OACA,YACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,WACA,MACA,UACA,UACA,WACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,OACA,YACA,OACA,WACA,SACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,UACA,WACA,QACA,QACA,SACA,UACA,iBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MACA,eACA,gBACA,SACA,SACA,YACA,WACA,QACA,wBCxFF,SAAAC,IAPQC,KAAAC,YAAc,GACdD,KAAAE,cAAgB,GAChBF,KAAAG,aAAe,GACfH,KAAAI,iBAAmB,GACnBJ,KAAAK,iBAAmB,GACnBL,KAAAM,sBAAwB,GAgRzBN,KAAAO,UAAYP,KAAKQ,aAAaR,KAAKK,iBAAkBL,KAAKI,iBAAkBJ,KAAKC,aAOjFD,KAAAS,SAAWT,KAAKU,WAAWV,KAAKK,iBAAkBL,KAAKI,iBAAkBJ,KAAKC,aAO9ED,K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","sourcesContent":["/**\n * Irregular rules.\n */\nexport var NgPluralizeIrregularRules = [\n  // Pronouns.\n  ['I', 'we'],\n  ['me', 'us'],\n  ['he', 'they'],\n  ['she', 'they'],\n  ['them', 'them'],\n  ['myself', 'ourselves'],\n  ['yourself', 'yourselves'],\n  ['itself', 'themselves'],\n  ['herself', 'themselves'],\n  ['himself', 'themselves'],\n  ['themself', 'themselves'],\n  ['is', 'are'],\n  ['was', 'were'],\n  ['has', 'have'],\n  ['this', 'these'],\n  ['that', 'those'],\n  // Words ending in with a consonant and `o`.\n  ['echo', 'echoes'],\n  ['dingo', 'dingoes'],\n  ['volcano', 'volcanoes'],\n  ['tornado', 'tornadoes'],\n  ['torpedo', 'torpedoes'],\n  // Ends with `us`.\n  ['genus', 'genera'],\n  ['viscus', 'viscera'],\n  // Ends with `ma`.\n  ['stigma', 'stigmata'],\n  ['stoma', 'stomata'],\n  ['dogma', 'dogmata'],\n  ['lemma', 'lemmata'],\n  ['schema', 'schemata'],\n  ['anathema', 'anathemata'],\n  // Other irregular rules.\n  ['ox', 'oxen'],\n  ['axe', 'axes'],\n  ['die', 'dice'],\n  ['yes', 'yeses'],\n  ['foot', 'feet'],\n  ['eave', 'eaves'],\n  ['goose', 'geese'],\n  ['tooth', 'teeth'],\n  ['quiz', 'quizzes'],\n  ['human', 'humans'],\n  ['proof', 'proofs'],\n  ['carve', 'carves'],\n  ['valve', 'valves'],\n  ['looey', 'looies'],\n  ['thief', 'thieves'],\n  ['groove', 'grooves'],\n  ['pickaxe', 'pickaxes'],\n  ['passerby', 'passersby'],\n  ['whiskey', 'whiskies']\n];\n","/**\n * Pluralization rules.\n */\nexport var NgPluralizePluralizationRules = [\n  [/s?$/i, 's'],\n  [/[^\\u0000-\\u007F]$/i, '$0'],\n  [/([^aeiou]ese)$/i, '$1'],\n  [/(ax|test)is$/i, '$1es'],\n  [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n  [/(e[mn]u)s?$/i, '$1s'],\n  [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n  [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n  [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n  [/(seraph|cherub)(?:im)?$/i, '$1im'],\n  [/(her|at|gr)o$/i, '$1oes'],\n  [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n  [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n  [/sis$/i, 'ses'],\n  [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n  [/([^aeiouy]|qu)y$/i, '$1ies'],\n  [/([^ch][ieo][ln])ey$/i, '$1ies'],\n  [/(x|ch|ss|sh|zz)$/i, '$1es'],\n  [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n  [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n  [/(pe)(?:rson|ople)$/i, '$1ople'],\n  [/(child)(?:ren)?$/i, '$1ren'],\n  [/eaux$/i, '$0'],\n  [/m[ae]n$/i, 'men'],\n  ['thou', 'you']\n]\n","/**\n * Singularization rules.\n */\nexport var NgPluralizeSingularizationRules = [\n  [/s$/i, ''],\n  [/(ss)$/i, '$1'],\n  [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n  [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n  [/ies$/i, 'y'],\n  [/(dg|ss|ois|lk|ok|wn|mb|th|ch|ec|oal|is|ck|ix|sser|ts|wb)ies$/i, '$1ie'],\n  [/\\b(l|(?:neck|cross|hog|aun)?t|coll|faer|food|gen|goon|group|hipp|junk|vegg|(?:pork)?p|charl|calor|cut)ies$/i, '$1ie'],\n  [/\\b(mon|smil)ies$/i, '$1ey'],\n  [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n  [/(seraph|cherub)im$/i, '$1'],\n  [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n  [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n  [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n  [/(test)(?:is|es)$/i, '$1is'],\n  [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n  [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n  [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n  [/(alumn|alg|vertebr)ae$/i, '$1a'],\n  [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n  [/(matr|append)ices$/i, '$1ix'],\n  [/(pe)(rson|ople)$/i, '$1rson'],\n  [/(child)ren$/i, '$1'],\n  [/(eau)x?$/i, '$1'],\n  [/men$/i, 'man']\n];\n","// Singular words with no plurals.\nexport var NgPluralizeUncountable =\n  [\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'software',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eÃ©]mon$/i,\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ];\n","import {Injectable} from '@angular/core';\n\nimport {NgPluralizeUncountable} from '../vars/ng-pluralize-uncountable.var';\nimport {NgPluralizeSingularizationRules} from '../vars/ng-pluralize-singularization-rules.var';\nimport {NgPluralizePluralizationRules} from '../vars/ng-pluralize-pluralization-rules.var';\nimport {NgPluralizeIrregularRules} from \"../vars/ng-pluralize-irregular-rules.var\";\n\n@Injectable()\nexport class PluralizeService {\n  private pluralRules = [];\n  private singularRules = [];\n  private uncountables = {};\n  private irregularPlurals = {};\n  private irregularSingles = {};\n  private restoreCaseExceptions = [];\n  \n  constructor() {\n    this._loadRules();\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  private _checkWord(replaceMap:any, keepMap:any, rules:any):Function {\n    return (word) => {\n      const token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) {\n        return true;\n      }\n\n      if (replaceMap.hasOwnProperty(token)) {\n        return false;\n      }\n\n      return this._sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  private _interpolate(str:string, args:any) {\n    return str.replace(\n      /\\$(\\d{1,2})/g,\n      (match, index) => {\n        return args[index] || '';\n      }\n    );\n  }\n\n  private _loadRules() {\n    NgPluralizeIrregularRules.forEach(\n      (rule) => {\n        return this.addIrregularRule(rule[0], rule[1]);\n      }\n    );\n\n    NgPluralizeSingularizationRules.forEach(\n      (rule) => {\n        return this.addSingularRule(rule[0], rule[1]);\n      }\n    );\n\n    NgPluralizePluralizationRules.forEach(\n      (rule) => {\n        return this.addPluralRule(rule[0], rule[1]);\n      }\n    );\n\n    /**\n     * Uncountable rules.\n     */\n    NgPluralizeUncountable.forEach(\n      (rule) => {\n        this.addUncountableRule(rule);\n      }\n    );\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  _replace(word:string, rule:any):string {\n    return word.replace(\n      rule[0],\n      function(match, index) {\n        var result = this._interpolate(rule[1], arguments);\n\n        if (match === '') {\n          return this._restoreCase(word[index - 1], result);\n        }\n\n        return this._restoreCase(match, result);\n      }.bind(this)\n    );\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  private _replaceWord(replaceMap:any, keepMap:any, rules:any) {\n    return (word) => {\n      // Get the correct token and case restoration functions.\n      const token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return this._restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return this._restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return this._sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  private _restoreCase(word:string, token:string):string {\n    // Do not restore the case of specified tokens\n    if (this.restoreCaseExceptions.indexOf(token) !== -1) {\n      return token;\n    }\n\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  private static _sanitizeRule(rule:string|RegExp):RegExp {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  private _sanitizeWord(token:string, word:string, rules:any):string {\n    // Empty string or doesn't need fixing.\n    if (!token.length || this.uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return this._replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  public addPluralRule(rule, replacement) {\n    this.pluralRules.push([PluralizeService._sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an exception to restoreCase.\n   *\n   * @param {string} exception\n   */\n\n  addRestoreCaseException(exception) {\n    this.restoreCaseExceptions.push(exception);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  addSingularRule(rule, replacement) {\n    this.singularRules.push([PluralizeService._sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  addUncountableRule(word) {\n    if (typeof word === 'string') {\n      this.uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singularize and pluralize references for the word.\n    this.addPluralRule(word, '$0');\n    this.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  addIrregularRule(single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    this.irregularSingles[single] = plural;\n    this.irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to fromCount\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  public fromCount(word:string, count:number, inclusive:boolean) {\n    var pluralized = count === 1\n      ? this.singularize(word) : this.pluralize(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  public pluralize = this._replaceWord(this.irregularSingles, this.irregularPlurals, this.pluralRules);\n\n  /**\n   * Check if a word is pluralize.\n   *\n   * @type {Function}\n   */\n  public isPlural = this._checkWord(this.irregularSingles, this.irregularPlurals, this.pluralRules);\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  public singularize = this._replaceWord(this.irregularPlurals, this.irregularSingles, this.singularRules);\n\n  /**\n   * Check if a word is singularize.\n   *\n   * @type {Function}\n   */\n  public isSingular = this._checkWord(this.irregularPlurals, this.irregularSingles, this.singularRules);\n}\n","import {NgModule} from '@angular/core';\n\nimport {PluralizeService} from './services/pluralize.service';\n\n@NgModule({\n  providers: [\n    PluralizeService\n  ]\n})\nexport class NgPluralizeModule {}\n"]}